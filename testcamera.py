import cv2
import platform
import numpy as np

def test_camera():
    """Ki·ªÉm tra camera c√≥ ho·∫°t ƒë·ªông kh√¥ng"""
    print("üîç KI·ªÇM TRA CAMERA SYSTEM")
    print("=" * 40)
    # Hi·ªÉn th·ªã th√¥ng tin h·ªá th·ªëng
    print(f"OS: {platform.system()} {platform.release()}")
    print(f"OpenCV version: {cv2.__version__}")
    
    # Danh s√°ch c√°c camera ID ƒë·ªÉ th·ª≠
    camera_ids = [0, 1, 2, -1]  # -1 cho m·ªôt s·ªë h·ªá th·ªëng
    
    working_cameras = []
    
    for camera_id in camera_ids:
        print(f"\nüé• Th·ª≠ camera ID: {camera_id}")
        
        try:
            # T·∫°o VideoCapture object
            cap = cv2.VideoCapture(camera_id)
            
            # Th·ª≠ c√°c backend kh√°c nhau
            backends = [
                (cv2.CAP_DSHOW, "DirectShow (Windows)"),
                (cv2.CAP_V4L2, "Video4Linux2 (Linux)"),
                (cv2.CAP_AVFOUNDATION, "AVFoundation (Mac)"),
                (cv2.CAP_ANY, "Auto detect")
            ]
            
            for backend, name in backends:
                print(f"  Th·ª≠ backend: {name}")
                cap = cv2.VideoCapture(camera_id, backend)
                
                if cap.isOpened():
                    # Th·ª≠ ƒë·ªçc frame
                    ret, frame = cap.read()
                    if ret and frame is not None:
                        height, width = frame.shape[:2]
                        print(f"  ‚úÖ TH√ÄNH C√îNG! ƒê·ªô ph√¢n gi·∫£i: {width}x{height}")
                        
                        working_cameras.append({
                            'id': camera_id,
                            'backend': backend,
                            'backend_name': name,
                            'resolution': (width, height)
                        })
                        
                        # Hi·ªÉn th·ªã frame trong 3 gi√¢y
                        print(f"  üì∫ Hi·ªÉn th·ªã camera trong 3 gi√¢y...")
                        for i in range(90):  # 30 FPS x 3 seconds
                            ret, frame = cap.read()
                            if ret:
                                cv2.putText(frame, f"Camera {camera_id} - {name}", 
                                          (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                                cv2.putText(frame, "Press 'q' to skip", 
                                          (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
                                cv2.imshow(f'Camera Test - ID {camera_id}', frame)
                                
                                if cv2.waitKey(33) & 0xFF == ord('q'):
                                    break
                        
                        cv2.destroyAllWindows()
                        break
                    else:
                        print(f"  ‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c frame")
                else:
                    print(f"  ‚ùå Kh√¥ng m·ªü ƒë∆∞·ª£c camera")
                
                cap.release()
        
        except Exception as e:
            print(f"  ‚ùå L·ªói: {e}")
    
    print("\n" + "=" * 40)
    print("üìä K·∫æT QUA KI·ªÇM TRA")
    print("=" * 40)
    
    if working_cameras:
        print("‚úÖ T√¨m th·∫•y camera ho·∫°t ƒë·ªông:")
        for cam in working_cameras:
            print(f"  - Camera ID: {cam['id']}")
            print(f"    Backend: {cam['backend_name']}")
            print(f"    ƒê·ªô ph√¢n gi·∫£i: {cam['resolution'][0]}x{cam['resolution'][1]}")
        
        return working_cameras
    else:
        print("‚ùå KH√îNG T√åM TH·∫§Y CAMERA N√ÄO HO·∫†T ƒë·ªông!")
        print("\nüîß G·ª¢I √ù KH·∫ÆC PH·ª§C:")
        print("1. Ki·ªÉm tra camera c√≥ ƒë∆∞·ª£c c·∫Øm ƒë√∫ng kh√¥ng")
        print("2. Ki·ªÉm tra driver camera")
        print("3. ƒê√≥ng c√°c ·ª©ng d·ª•ng kh√°c ƒëang d√πng camera (Skype, Teams, Zoom)")
        print("4. Th·ª≠ c·∫Øm l·∫°i camera")
        print("5. Kh·ªüi ƒë·ªông l·∫°i m√°y t√≠nh")
        
        return []

def test_camera_permissions():
    """Ki·ªÉm tra quy·ªÅn truy c·∫≠p camera"""
    print("\nüîê KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P CAMERA")
    print("=" * 40)
    
    system = platform.system()
    
    if system == "Windows":
        print("Windows - Ki·ªÉm tra Camera Privacy Settings:")
        print("1. Settings > Privacy & Security > Camera")
        print("2. Cho ph√©p ·ª©ng d·ª•ng desktop truy c·∫≠p camera")
        print("3. Cho ph√©p Python.exe truy c·∫≠p camera")
    
    elif system == "Darwin":  # macOS
        print("macOS - Ki·ªÉm tra quy·ªÅn camera:")
        print("1. System Preferences > Security & Privacy > Camera")
        print("2. Cho ph√©p Terminal ho·∫∑c Python truy c·∫≠p camera")
    
    elif system == "Linux":
        print("Linux - Ki·ªÉm tra quy·ªÅn camera:")
        print("1. Ki·ªÉm tra user c√≥ trong group video: groups $USER")
        print("2. Th√™m user v√†o group video: sudo usermod -a -G video $USER")
        print("3. Ki·ªÉm tra camera device: ls -la /dev/video*")

def advanced_camera_test():
    """Test camera n√¢ng cao v·ªõi c√°c t√πy ch·ªçn"""
    print("\nüî¨ KI·ªÇM TRA CAMERA N√ÇNG CAO")
    print("=" * 40)
    
    # Th·ª≠ v·ªõi DirectShow tr√™n Windows
    if platform.system() == "Windows":
        print("Th·ª≠ v·ªõi DirectShow backend...")
        cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
    else:
        cap = cv2.VideoCapture(0)
    
    if not cap.isOpened():
        print("‚ùå Kh√¥ng m·ªü ƒë∆∞·ª£c camera v·ªõi backend m·∫∑c ƒë·ªãnh")
        return False
    
    # Thi·∫øt l·∫≠p c√°c thu·ªôc t√≠nh camera
    properties_to_test = [
        (cv2.CAP_PROP_FRAME_WIDTH, "Width"),
        (cv2.CAP_PROP_FRAME_HEIGHT, "Height"),
        (cv2.CAP_PROP_FPS, "FPS"),
        (cv2.CAP_PROP_BRIGHTNESS, "Brightness"),
        (cv2.CAP_PROP_CONTRAST, "Contrast"),
        (cv2.CAP_PROP_SATURATION, "Saturation"),
        (cv2.CAP_PROP_HUE, "Hue"),
    ]
    
    print("üìã Thu·ªôc t√≠nh camera hi·ªán t·∫°i:")
    for prop, name in properties_to_test:
        value = cap.get(prop)
        print(f"  {name}: {value}")
    
    # Th·ª≠ thi·∫øt l·∫≠p ƒë·ªô ph√¢n gi·∫£i
    resolutions = [(640, 480), (1280, 720), (1920, 1080)]
    
    for width, height in resolutions:
        cap.set(cv2.CAP_PROP_FRAME_WIDTH, width)
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height)
        
        actual_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        actual_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        
        print(f"Y√™u c·∫ßu: {width}x{height} -> Th·ª±c t·∫ø: {actual_width}x{actual_height}")
    
    cap.release()
    return True

if __name__ == "__main__":
    try:
        # Test c∆° b·∫£n
        working_cameras = test_camera()
        
        # Test quy·ªÅn truy c·∫≠p
        test_camera_permissions()
        
        # Test n√¢ng cao n·∫øu c√≥ camera
        if working_cameras:
            advanced_camera_test()
        
        print("\n" + "=" * 40)
        print("‚úÖ HO√ÄN T·∫§T KI·ªÇM TRA CAMERA")
        
        if working_cameras:
            print(f"S·ª≠ d·ª•ng Camera ID {working_cameras[0]['id']} cho ·ª©ng d·ª•ng")
        
    except KeyboardInterrupt:
        print("\nüëã ƒê√£ d·ª´ng ki·ªÉm tra")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong ƒë·ª£i: {e}")