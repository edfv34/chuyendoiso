#!/usr/bin/env python3
"""
Script kh·ªüi ƒë·ªông ·ª©ng d·ª•ng Helmet Detection
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def check_requirements():
    """Ki·ªÉm tra v√† c√†i ƒë·∫∑t requirements"""
    print("üîç Ki·ªÉm tra requirements...")
    
    try:
        import flask
        import cv2
        import ultralytics
        print("‚úÖ T·∫•t c·∫£ requirements ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        return True
    except ImportError as e:
        print(f"‚ùå Thi·∫øu package: {e}")
        return False

def install_requirements():
    """C√†i ƒë·∫∑t requirements"""
    print("üì¶ C√†i ƒë·∫∑t requirements...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ C√†i ƒë·∫∑t requirements th√†nh c√¥ng")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå L·ªói c√†i ƒë·∫∑t requirements")
        return False

def setup_directories():
    """T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt"""
    print("üìÅ T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c...")
    
    directories = [
        "static/uploads",
        "violations",
        "models",
        "templates"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ T·∫°o th∆∞ m·ª•c: {directory}")

def download_model():
    """T·∫£i model YOLO n·∫øu ch∆∞a c√≥"""
    model_path = "models/yolov8n.pt"
    
    if not os.path.exists(model_path):
        print("üîÑ ƒêang t·∫£i model YOLOv8...")
        try:
            from ultralytics import YOLO
            model = YOLO('yolov8n.pt')  # S·∫Ω t·ª± ƒë·ªông t·∫£i v·ªÅ
            
            # Di chuy·ªÉn model v√†o th∆∞ m·ª•c models
            if os.path.exists('yolov8n.pt'):
                shutil.move('yolov8n.pt', model_path)
                print("‚úÖ Model ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªÅ v√† c·∫•u h√¨nh")
            
        except Exception as e:
            print(f"‚ùå L·ªói t·∫£i model: {e}")
            return False
    else:
        print("‚úÖ Model ƒë√£ t·ªìn t·∫°i")
    
    return True

def create_template_files():
    """T·∫°o file template n·∫øu ch∆∞a c√≥"""
    template_dir = Path("templates")
    
    # Template c∆° b·∫£n cho index.html
    index_template = """<!DOCTYPE html>
<html>
<head>
    <title>Helmet Detection System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-5">Helmet Detection System</h1>
        <div class="row">
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body text-center">
                        <h5>Live Detection</h5>
                        <a href="/live" class="btn btn-primary">Start</a>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body text-center">
                        <h5>Upload File</h5>
                        <input type="file" id="fileInput" class="form-control mb-2">
                        <button onclick="uploadFile()" class="btn btn-success">Upload</button>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body text-center">
                        <h5>Results</h5>
                        <a href="/results" class="btn btn-info">View</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>"""

    templates = {
        "index.html": index_template,
        "live_detection.html": """<!DOCTYPE html>
<html>
<head><title>Live Detection</title></head>
<body>
    <div class="container">
        <h2>Live Camera Detection</h2>
        <img src="/video_feed" width="640" height="480">
        <br>
        <button onclick="startCamera()">Start</button>
        <button onclick="stopCamera()">Stop</button>
    </div>
</body>
</html>""",
        "results.html": """<!DOCTYPE html>
<html>
<head><title>Results</title></head>
<body>
    <div class="container">
        <h2>Detection Results</h2>
        <div id="results">Results will appear here</div>
    </div>
</body>
</html>"""
    }
    
    for filename, content in templates.items():
        file_path = template_dir / filename
        if not file_path.exists():
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ T·∫°o template: {filename}")

def main():
    """H√†m main"""
    print("üöÄ Kh·ªüi ƒë·ªông Helmet Detection System")
    print("=" * 50)
    
    # Ki·ªÉm tra Python version
    if sys.version_info < (3, 7):
        print("‚ùå C·∫ßn Python 3.7 ho·∫∑c cao h∆°n")
        sys.exit(1)
    
    print(f"‚úÖ Python version: {sys.version}")
    
    # T·∫°o th∆∞ m·ª•c
    setup_directories()
    
    # Ki·ªÉm tra requirements
    if not check_requirements():
        if not install_requirements():
            print("‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t requirements")
            sys.exit(1)
    
    # T·∫£i model
    if not download_model():
        print("‚ùå Kh√¥ng th·ªÉ t·∫£i model")
        sys.exit(1)
    
    # T·∫°o template files c∆° b·∫£n
    create_template_files()
    
    print("\n" + "=" * 50)
    print("‚úÖ Setup ho√†n t·∫•t!")
    print("üåê Kh·ªüi ƒë·ªông web server...")
    print("üì± Truy c·∫≠p: http://localhost:5000")
    print("üõë Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng")
    print("=" * 50)
    
    # Kh·ªüi ƒë·ªông Flask app
    try:
        from app import app
        app.run(debug=True, host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        print("\nüëã ·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c d·ª´ng")
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi ƒë·ªông: {e}")

if __name__ == "__main__":
    main()